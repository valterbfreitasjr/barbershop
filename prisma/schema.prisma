generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Barbershop {
  id          String   @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String

  services BarbershopService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BarbershopService {
  id          String  @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal @db.Decimal(10, 2)

  bookings Booking[]

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id])

  date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
